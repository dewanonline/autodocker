#!/usr/bin/env node-dev
process.env.DEBUG = process.env.DEBUG || "*,-portastic*"
const R             = require('ramda')
const port          = require('portastic')
const debug         = R.memoize(require('debug'))
const fs            = require('fs')
const {spawn, exec} = require('./process')

const {
  repositories, timeout, workdir, portastic, rulesFile
} = require('./config')

let proxyRules = []
const clearProxyRules = () => proxyRules = []
const addToProxyRules = (host, port) => {
  debug('proxy:rules:add')(host, port)
  proxyRules.push([host, `http://127.0.0.1:${port}`])
}
const refreshDns = (image) =>
  exec(`echo "address=/${image}/127.0.0.1" >> /etc/dnsmasq.conf && pkill dnsmasq; dnsmasq`)

const writeProxyRules = () => {
  debug('proxy:rules:written')(proxyRules)
  fs.writeFileSync(__dirname+rulesFile, JSON.stringify(proxyRules, null, ' '))
}

const getFreePorts = () => port.find(portastic)

const createDir = (dir) => {
  try {
    fs.statSync(dir)
  } catch (e) {
    exec(`mkdir ${dir}`)
  }
}

const cloneRepoIfNotExists = ({path, cwd}) => {
  try {
    fs.statSync(cwd)
  } catch (e) {
    exec(`git clone ${path} ${cwd}`)
  }
}

const parseStdout = R.compose(R.reject(R.isEmpty), R.split('\n'), String)
const removeSelectedBranch = R.map(R.replace(/^(\*)?\s+/,''))
const removeOrigin = R.map(R.replace(/^\s+origin\//,''))
const removeHEAD = R.reject(R.test(/HEAD/))
  
const getRemoteBranchesHEAD = (cwd) =>
  removeOrigin(removeHEAD(parseStdout(exec("git branch -r -v --no-color", {cwd}))))
  
const getLocalBranchesHEAD = (cwd) =>
  removeSelectedBranch(parseStdout(exec("git branch -v --no-color", {cwd})))
  
const getNotUpdatedRefs = (cwd) => {
  let refs = R.difference(getRemoteBranchesHEAD(cwd), getLocalBranchesHEAD(cwd))
  debug('not:updated:refs')(refs)
  return refs
}

const updateBranches = (cwd) => exec("git fetch -a", {cwd})

const runImageOnPort = (image, cwd, port) => {
  let [fromPort=8083, ...ports] = exposedPorts(fs.readFileSync(`${cwd}/Dockerfile`))
  spawn(`docker run --interactive --detach --name ${image} --publish ${port}:${fromPort} ${image}`)
  return port
}

const isRunning = image => {
  try {
    return !R.isEmpty(exec(`docker ps -a | grep -E ${image}`))
  } catch (e) {
    return false
  }
}
  
const shutdownKernel = image =>
  exec(`docker rm -f ${image}`)

const shutdownIfRunning = image => {
  if (isRunning(image)) shutdownKernel(image) && debug('shutdown')(image)
}

const exposedPorts = R.compose(R.flatten, R.map(R.match(/\d+/g)), R.match(/expose.*/gi), String)


const buildBranches = ({cwd, refs, name}) => {
  exec(`git fetch --all`, {cwd})
  sequence = Promise.resolve()
  R.map(ref => {
    let [,branch, commit, message] = R.match(/(\w+)\s+(\w+)\s+(.*)/, ref)
    let image = `${name}.${branch}`.toLowerCase().replace(/[\/]/g, '.').split('.').reverse().join('.')
    let port = null
    sequence = sequence
    .then( () => {
      if (R.contains(ref, getLocalBranchesHEAD(cwd)) && isRunning(image)) {
        debug(`branch ${branch}`)('up to date and running')
        return Promise.resolve()
      }
        
      debug("branch")(branch, commit, message)
      
      exec(`git checkout ${branch}`, {cwd})
      exec(`git pull`, {cwd})
      return Promise.resolve()
      .then(() => spawn(`docker build --tag ${image} ${cwd}`))
      .then(()=> getImageRunPortsOrFreePorts(image))
      .then(ports => port = R.head(ports))
      .then(() => shutdownIfRunning(image))
      .then(() => addToProxyRules(image, port))
      .then(() => refreshDns(image))
      .then(() => runImageOnPort(image, cwd, port))
      .catch(debug('error'))
    })
  }, refs)
  
  return sequence
}

const getImageRunPortsOrFreePorts = (image) => {
  const clearPorts = R.map(R.replace(/.*:(\d+)->/, '$1'))
  let ports = clearPorts(R.match(new RegExp(image+'.*->'), exec('docker ps')))
  if (R.isEmpty(ports)) return getFreePorts()
  debug(`${image} was running on`)(ports)
  return Promise.resolve(ports)
}

const processRepos = R.map((path) => {
  const name = R.takeLast(2, path.replace('.git','').split('/')).join('/')
  const cwd = [workdir,name].join('/')
  cloneRepoIfNotExists({path, cwd})
  // clearProxyRules()
  return buildBranches({cwd, name, refs: getRemoteBranchesHEAD(cwd)})
  .then(writeProxyRules)
})

R.map(createDir, ['./logs', workdir])
const start = () => {
  return Promise.all(processRepos(repositories)).then(start).catch(debug('autodoker:error'))
}
start()
